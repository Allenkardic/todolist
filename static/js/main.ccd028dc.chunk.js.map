{"version":3,"sources":["components/layout/Navbar.js","context.js","components/todos/Listtodo.js","components/todos/Listtodos.js","components/layout/NotFound.js","components/todos/Addtodo.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","brand","this","props","className","to","class","style","color","fontSize","Component","Context","React","createContext","reducer","state","action","type","items","filter","item","id","payload","Provider","dispatch","setState","value","children","Consumer","Listtodo","onDeleteClick","content","date","activities","onClick","bind","htmlFor","float","padding","Listtodos","Fragment","map","key","NotFound","textAlign","paddingTop","marginBottom","marginTop","Addtodo","handleChange","e","target","name","handleSubmit","preventDefault","uuid","history","push","onSubmit","onChange","required","placeholder","App","about","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ccd028dc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../../CSS/Navbar.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    const { brand } = this.props;\r\n    return (\r\n      <div className=\"navbar\">\r\n        <div className=\"navbar-items\">\r\n          {brand}\r\n        </div>\r\n        <div className=\"navbar-items\">\r\n          <Link to=\"/addtodo\">\r\n            <i\r\n              class=\"fas fa-plus\"\r\n              style={{ color: \"rgb(32, 35, 42)\", fontSize: \"1.5em\" }}\r\n            />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n\r\nNavbar.propTypes = {\r\n  brand: PropTypes.string.isRequired\r\n};\r\n","import React, { Component } from \"react\";\r\nconst Context = React.createContext();\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_LISTTODO\":\r\n      return {\r\n        ...state,\r\n        items: state.items.filter((item) => item.id !== action.payload)\r\n      };\r\n\r\n    case \"ADD_TODO\":\r\n      return {\r\n        ...state,\r\n        items: [action.payload, ...state.items]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    items: [],\r\n    dispatch: (action) => {\r\n      this.setState((state) => reducer(state, action));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../../CSS/listtodo.css\";\r\nimport { Consumer } from \"../../context\";\r\n\r\nclass Listtodo extends Component {\r\n  onDeleteClick = (id, dispatch) => {\r\n    dispatch({ type: \"DELETE_LISTTODO\", payload: id });\r\n  };\r\n\r\n  render() {\r\n    const { id, date, activities } = this.props.content;\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { dispatch } = value;\r\n\r\n          return (\r\n            <div className=\"container\">\r\n              <h1>\r\n                Date: {date}{\" \"}\r\n                <i\r\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                  class=\"fas fa-trash-alt delete-todos\"\r\n                />\r\n              </h1>\r\n\r\n              <ul>\r\n                <li className=\"container-inner-list\">\r\n                  Activities: {activities}\r\n                </li>\r\n              </ul>\r\n              <form action=\"\">\r\n                <label htmlFor=\"\">Activities completed:</label>\r\n                <input\r\n                  style={{ float: \"right\", padding: \"5%\" }}\r\n                  type=\"checkbox\"\r\n                />\r\n              </form>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Listtodo;\r\n\r\nListtodo.propTypes = {\r\n  content: PropTypes.object.isRequired\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Listtodo from \"./Listtodo\";\r\nimport { Consumer } from \"../../context\";\r\n\r\nclass Listtodos extends Component {\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { items } = value;\r\n          return (\r\n            <React.Fragment>\r\n              {items.map((content) => (\r\n                <Listtodo key={content.id} content={content} />\r\n              ))}\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Listtodos;\r\n","import React from \"react\";\r\nfunction NotFound() {\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <h1 style={{ paddingTop: \"4rem\" }}>Error page</h1>\r\n      <i\r\n        style={{ fontSize: \"5em\", marginBottom: \"2rem\", marginTop: \"2rem\" }}\r\n        class=\"fas fa-exclamation-triangle\"\r\n      ></i>\r\n      <p>This page doesnot exist</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","/** @format */\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"../../CSS/addtodo.css\";\r\nimport uuid from \"uuid\";\r\nimport { Consumer } from \"../../context\";\r\n\r\nclass Addtodo extends Component {\r\n  state = {\r\n    date: \"\",\r\n    activities: \"\"\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleSubmit = (dispatch, e) => {\r\n    e.preventDefault();\r\n    const { date, activities } = this.state;\r\n    const newTodo = {\r\n      id: uuid(),\r\n      date,\r\n      activities\r\n    };\r\n    dispatch({ type: \"ADD_TODO\", payload: newTodo });\r\n\r\n    this.setState({ date: \"\", activities: \"\" });\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  render() {\r\n    const { date, activities } = this.state;\r\n    return (\r\n      <Consumer>\r\n        {(value) => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"container-addtodo\">\r\n              <h1>Add to Todo</h1>\r\n              <form onSubmit={this.handleSubmit.bind(this, dispatch)}>\r\n                <label htmlFor=\"date\" className=\"label-form\">\r\n                  {\" \"}\r\n                  Date:{\" \"}\r\n                </label>{\" \"}\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"date\"\r\n                  onChange={this.handleChange}\r\n                  value={date}\r\n                  className=\"container-addtodo-inner\"\r\n                  required\r\n                />\r\n                <br />\r\n                <label htmlFor=\"morning\" className=\"label-form\">\r\n                  {\" \"}\r\n                  Activities:\r\n                </label>{\" \"}\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Activities\"\r\n                  name=\"activities\"\r\n                  onChange={this.handleChange}\r\n                  value={activities}\r\n                  className=\"container-addtodo-inner\"\r\n                  required\r\n                />\r\n                <br />\r\n                <button type=\"submit\" value=\"AddTodo\" className=\"btn\">\r\n                  Submit Activity\r\n                </button>\r\n              </form>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Addtodo;\r\n","import React from \"react\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Listtodos from \"./components/todos/Listtodos\";\nimport { Provider } from \"./context\";\nimport NotFound from \"./components/layout/NotFound\";\nimport Addtodo from \"./components/todos/Addtodo\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nfunction App() {\n  return (\n    <Provider>\n      <Router>\n        <div className=\"App\">\n          <Navbar brand=\"AdDoN\" about=\"about\" />\n          <Switch>\n            <Route exact path=\"/\" component={Listtodos} />\n            <Route exact path=\"/addtodo\" component={Addtodo} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}